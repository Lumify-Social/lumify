{% block title %}Publication
{% endblock %}
{% block body %}
{% include 'posts/sidebar.html.twig' %}
<div class="text-zinc-200 min-h-screen">
	<div class="max-w-2xl mx-auto px-6">
		<div class="flex items-center mb-4 space-x-2">
			<a href="/posts" class="flex items-center">
				<img src="{{ asset('img/icons/arrow-back.png') }}" class="h-5" alt="Arrow Left Icon"/>
				<h1 class="text-4xl font-extrabold text-white">&nbsp;&nbsp;Post</h1>
			</a>
		</div>
		<div class="p-6 rounded-t-2xl shadow-lg hover:shadow-2xl transition-shadow duration-300 border border-zinc-700">
			<p class="font-semibold text-lg text-white">{{ post.user.username }}</p>
			<p class="mt-2 text-zinc-300">
				{{ post.content }}
			</p>
			<p class="text-sm text-zinc-500 mt-4">
				<em>Publié le
					{{ post.createdAt|date('d/m/Y H:i') }}
					• Avec Lumify</em>
			</p>
			<hr class="border border-zinc-700 w-75 mt-5 mb-5">
			<div class="flex justify-between items-center">
				<div class="flex items-center text-zinc-300">
					<button class="like-button flex items-center" data-post-id="{{ post.id }}" data-liked="{{ post.userHasLiked }}">
						{% if post.userHasLiked %}
							<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 text-red-500" fill="currentColor" viewbox="0 0 24 24">
								<path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
							</svg>
						{% else %}
							<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="currentColor" viewbox="0 0 24 24">
								<path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
							</svg>
						{% endif %}
						<span id="likes-count-{{ post.id }}">{{ post.likesCount }}</span>
					</button>
				</div>
				<img src="{{ asset('img/icons/repost.png') }}" class="h-5" alt="Repost Icon"/>
				<img src="{{ asset('img/icons/comment.png') }}" class="h-5" alt="Comment Icon"/>
			</div>
		</div>
		{{ form_start(comment_form, {'attr': {'class': 'space-y-4'}}) }}
		<div class="relative">
			{{ form_widget(comment_form.content, { 'attr': { 'class': 'bg-black w-full px-4 py-2 pr-16 border border-zinc-700 text-zinc-200', 'placeholder': 'Écrivez votre commentaire ici...' } }) }}
			<button type="submit" class="absolute right-2 top-1/2 transform -translate-y-1/2 bg-pink-500 text-white font-semibold py-1 px-4 rounded">
				Publier
			</button>
		</div>
		{{ form_end(comment_form) }}
		<script>
document.addEventListener("DOMContentLoaded", function () {
    const likeButtons = document.querySelectorAll('.like-button');

    likeButtons.forEach(button => {
        button.addEventListener('click', async function (event) {
            event.preventDefault();

            const postId = button.getAttribute('data-post-id');
            const userHasLiked = button.getAttribute('data-liked') === 'true'; 
            const url = `/posts/${postId}/like`;

            try {

                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                console.log(data);

                // Vérifie que le serveur renvoie les informations nécessaires
                if (data.likesCount !== undefined && data.liked !== undefined) {
                    // Met à jour le compteur de likes
                    const likesCounter = document.getElementById(`likes-count-${postId}`);
                    if (likesCounter) {
                        likesCounter.textContent = data.likesCount;
                    }

                    // Met à jour l'état du bouton (liked/unliked)
                    button.setAttribute('data-liked', data.liked.toString());

                    if (data.liked) {
                        button.innerHTML = `
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 text-red-500" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                            </svg>
                            ${data.likesCount}
                        `;
                    } else {
                        button.innerHTML = `
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                            </svg>
                            ${data.likesCount}
                        `;
                    }
                }
            } catch (error) {
                console.error('Error:', error);
            } 
        });
    });
});
</script>